functions have the keyword fn

compile with rustc for small programs

! at the end of a function name is a macro instead of a function

best way to start a new project is with "cargo new 'x'"

build with cargo for bigger projects, sit in top level directory and run "cargo build"

cargo.lock keeps track of the versions of dependancies for the project

can run the program with cargo run, it will also build then run

"cargo check" will check to see if the program would compile but doesn't make an executable

when ready for realease build with "cargo build --realease" to get optimisations

to import things "use" is the keyword

"let" is the keyword to say that this is a var. Variables are immutable by default, so using the keyword "mut" after let will let it be mutable

"::new" indicates that new is an asscoiated function of the String type, this is known in other languages as a Static method

calling functions from stdin() 
    "io::stdin()
        .read_line(x d)
        .expec()
    "
& is a reference, and are immutable by defult
&mut guess - gives a mutable reference called guess

can do multiple lines for a function call for readability

adding to the Cargo.toml file dependancies will download and add to the project next time it is built

changing the Cargo.lock file is the only way to update the downloaded dependancies so nothing breaks.

update the dependancies to the latest automatically by running "cargo update"

"Ordering" is an enum and can have 3 possible outputs

Rust has type inferencing so be careful when comparing

shadowing allows the reassigning of vars like if you want to make a string int into an actual int

to declare constants use const instead of let when declaring the var

shadowing is when you redeclare a var with the same function name
"let x = 5; let x = x + 1"

statically typed language

i - signed int
u - unsigned int

math functions the same as c

bool is the keyword for Boolean

single quote char, double quote string

tuple can have multiple types, arrays cannot

specific array declaration:
"let a: [i32; 5] = [1,2,3,4,5]

snake case is the convention

declare the type of the var being given to each function

has short hand i++

Expression based language
    - Statements cannot return values ie
        -- let x = (let y = 6) // causes an error and isn't allowed

Returning from a function
    - (-> type) needs to be the last thing before {
    - no return keyword needed if the last thing in the function is the
        wanted value
    - can return early from a function by using the return keyword
    - putting a semicolon at the end of an expression can change it to a
        statement. So when returning from a function, do not put a semi-
        colon at the end.

Control Flow
    - don't need brackets around if boolean statement
    - else if optional
    - can use an if to assign to a var
    - while, for and loop
    - for ele in a.iter()
    - for number in (1..4).rec() 

Ownership
    - All data stored on the stack must have a known, fixed size.
        Data with an unknown size at compile time or a size that 
        might change must be stored on the heap instead. 
    - Putting on the stack is faster
    - Getting data off the heap is slower cause you have to follow a pointer
        The heap is less organized
    - Memory is automatically returned when something falls out of scope,
        this is a different approach from having a garbage collector or
        using allocate or free.
    - stack calls a value will just be copied to the other var with
        "let x = 5; = let y = x". But with heap calls the pointer gets
        moved to the new var and x is freed/drop and y would be the 
        only thing that references the original object on the heap.
        This is similar to shallow copying in java, but it will rm the
        original var.
    - Deep clone have to be explicitly called with x.clone()
    - copy trait are the things that will automatically deep clone which
        are stack things like ints and bool. If something has a drop trait
        like on the heap it will only shallow copy.
    - Passing a var into a function will change its scope to just the function
        that it is passed into, and thefore removing it from the outside
        function. It is transfering ownership, so to get it back it has to
        get returned again. or a work around would be to use references.    

References
    - &type
    - fn example(s: &String)
    - using a reference allows you to refer to a value without transfering
        ownership
    - you dereference something by using *
    - can edit something at the end of a reference in a function if you
        make that var mut and pass a mut reference to the function
    - 2 vars cannot have the same mut reference, but they can have the same
        reference
    - cannot have mut and non-mut references, multiple non-mut is fine though
    - if you have a reference to some data, the compiler will ensure
        that the data will not go out of scope before the reference to 
        the data does.

String (on heap)
    - let s = String::from("hello");
    - mutable
        The heap is less organized

Slice
    - reference part of a string
    - &s[0..5] == [0,5)

Struct
    - use the dot notation to access things within the struct
    - entire thing must be marked as mut otherwise it will not be able to
        change it, you cannot mark certain fields as mut
    - Having a function and inputing vals into a struct you can short hand
        and not have email: email
    - updating struct values from another instanct has a shorthand
        "email: String::from("example@uq"),
        username: String::from("anotheruser"),
        ..user1"
    - tuple structs, use .indexVal to access parts
    - Using lifetimes is how you keep ownership alive for as long as the 
        struct is
    - putting :? in the {} when println! will put it in debug form
        and you also have to put #[derive(Debug)] above struct or you can
        use {:#?}
    - self is always the first parameter in a method
    - impl stuct_name {} is how you write a method
    - you can write functions that are associated with the struct that but
        don't have &self, often used as constructors that return a new
        instance of the struct, for associated functions :: is used to call
        for methods . is used. 

Enums and pattern matching:
    - Good for things when they can be one thing or another, like an
        IP address it can be v6 of v4. Similar to option in haskell
    - like a struct set up but keyword is enum
    - can define type like in a struct by var(type),
    - can define methods for them like structs
    - Option<T> is in prelude = Some(T) | None
    - compiler cannot infer type on option

match keyword
    - match is the same as pattern matching in haskell, makes sure
        all the bases are covered
    - pattern matching like if, but if has to return a bool value, match
        doesn't
    - instead of -> on match like in haskell it is => 
    - if let is a way to do match if you only want to match on one case and
        ignore the rest
    - Sytax of the matching:
            "    let some_u8_value = Some(0u8);
        match some_u8_value {
            Some(3) => println!("three"),
            _ => (),
        } "
                "if let Some(3) = some_u8_value {
            println!("three");
        } "
